#!/bin/bash

WEB_CONF_ROOT="/var/www"
WEB_SERVER_CONFIG_TEMPLATE_PATH=""
VHROOT="$WEB_CONF_ROOT/vhosts"
BACKUPROOT="/var/backups"
MYSQL_SERVER_ADRESS="127.0.0.1"
MYSQL_ROOT_PASS="secret_password"

hostname=""
CMD=""
hosttpl=""

#thx2 ajdiaz. This function get from http://ajdiaz.wordpress.com/2008/02/09/bash-ini-parser/
cfg_parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}

usage() {
	echo "USAGE: $0 -c -h <HOST_NAME> --password <PASSWORD> -t <WEB_SERVER_CONFIG_TEMPLATE>"
	echo "USAGE: $0 -u -h <HOST_NAME> --database-password <DATABASE_PASSWORD>"	
	echo "USAGE: $0 -d -h <HOST_NAME>"
	echo -e "Short options:"
	echo -e "\t-c Create virtual host."
	echo -e "\t-c Update existing virtual host."
	echo -e "\t-c Delete existing virtual host."
	echo -e "\t-h <HOST_NAME>\tName of virtual host.\tExample: example.dev,example.loc"
	echo -e "\t-t <WEB_SERVER_CONFIG_TEMPLATE>\tName of config template for webserver.\tExample: wolfcms,yii,cohana"
	echo -e "Long options:"
	echo -e "\t--password Set password on database and system user"
	echo -e "\t--database-password Set password on database only"
}

printError() {
	echo "[!] Invalid option" && usage && exit 1
}

loadConfig() {
	#todo
}

main() {
	if[ "$CMD" == "create"] && $
	#todo
}

while getopts "cduh:t:" Option; do
	case $Option in
			c ) CMD="create"
			d ) CMD="delete"
			u ) CMD="update"
			h ) hostname="$OPTARG";;
			t ) hosttpl="$OPTARG";;
			* ) printError;;
	esac
done

if [ "$CMD" != "" -a "$hostname" != "" ]
then
	main
else
	printError
fi

exit 0
