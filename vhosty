#!/bin/bash
# ----------------------------------------------------------------------
#    Copyright (c) 2014
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of version 3 of the GNU General Public
#    License published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
# ----------------------------------------------------------------------
# Authors:
#  Alex V Kotelnikov (aka gudron) <gudron@gudron.me>
#
# /usr/local/bin/vhosty
VHOSTY_CONFIG_FILE_PATH="/etc/vhosty.ini" #

hostname=""
CMD=""
hosttpl=""
password=""
databasePassword=""
databaseType=""
execPath=""

#thx2 ajdiaz. This function get from http://ajdiaz.wordpress.com/2008/02/09/bash-ini-parser/
cfg_parser ()
{
    ini="$(<$1)"                # read the file
    ini="${ini//[/\[}"          # escape [
    ini="${ini//]/\]}"          # escape ]
    IFS=$'\n' && ini=( ${ini} ) # convert to line-array
    ini=( ${ini[*]//;*/} )      # remove comments with ;
    ini=( ${ini[*]/\    =/=} )  # remove tabs before =
    ini=( ${ini[*]/=\   /=} )   # remove tabs be =
    ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
    ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
    ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
    ini=( ${ini[*]/=/=\( } )    # convert item to array
    ini=( ${ini[*]/%/ \)} )     # close array parenthesis
    ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
    ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
    ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
    ini[0]="" # remove first element
    ini[${#ini[*]} + 1]='}'    # add the last brace
    eval "$(echo "${ini[*]}")" # eval the result
}

usage() {
	sn=`basename $0`

	echo "USAGE: $sn -c -h <HOST_NAME> --password <PASSWORD> -t <WEB_SERVER_CONFIG_TEMPLATE>"
	echo "USAGE: $sn -u -h <HOST_NAME> --database-password <DATABASE_PASSWORD>"	
	echo "USAGE: $sn -d -h <HOST_NAME>"
	echo -e "Options:"
	echo -e "\t-c | --create Create virtual host."
	echo -e "\t-u | --update Update existing virtual host."
	echo -e "\t-d | --delete Delete existing virtual host."
	echo -e "\t-h | --host <HOST_NAME>\tName of virtual host.\tExample: example.dev,example.loc"
	echo -e "\t-P | --password <SECRET_PASSWORD>\tSet password on database and system user"
	echo -e "\t-D | --database-type <DATABASE_TYPE>\tWhat database u want use. Available: mysql"	
	echo -e "\t-p | --database-password <SECRET_PASSWORD>\tThis password will be set on new database user"
	echo -e "\t-t | --template <WEB_SERVER_CONFIG_TEMPLATE>\tName of config template for webserver.\n\tExample: wolfcms,yii,cohana. Full list in https://github.com/gudron/nginxconfy"
}

printError() {
	echo "[!] Invalid option" && usage && exit 1
}

loadConfig() {
	cfg_parser "$VHOSTY_CONFIG_FILE_PATH"
	cfg.section.main
	cfg.section."$databaseType"
}

main() {
	execPath=`pwd`
	loadConfig
	parameters="--host $hostname --database-type $databaseType"
	case $CMD in
		"create" )
		if [ "$hosttpl" != "" ]
		then
			parameters="$parameters --template $hosttpl"
			if [ "$password" != "" ]
			then
				parameters="$parameters --password $password"
			fi

			if [ "$databasePassword" != "" ]
			then
				parameters="$parameters --database-password $databasePassword"
			fi
			parameters="$parameters --database-access-user $DB_USER \
			--database-access-password $DB_PASS \
			--database-host $DB_SERVER_ADRESS"

			bash -c "$execPath/vhosty-create $parameters"
		fi
		;;
		"delete" )
		bash -c "$execPath/vhosty-delete $parameters"
		;;
		"update" )
		;;
	esac
}

TEMP=`getopt -o cduh:p:D:P:t: -l create,update,delete,host:,password:,database-type:,database-password:,template: -n 'vhosty.sh' -- "$@"`

if [ $? != 0 ] ; then printError ; fi

eval set -- "$TEMP"
while true ; do
	case "$1" in
		-c|--create ) CMD="create" ; shift ;;
		-d|--delete ) CMD="delete" ; shift ;;
		-u|--update ) CMD="update" ; shift ;;
		-h|--host ) 
			hostname="$2" ; shift 2 ;;
		
		-P|--password ) 
			password="$2" ; shift 2 ;;
		
		-p|--database-password ) 
			databasePassword="$2" ; shift 2 ;;
		
		-t|--template )
			 hosttpl="$2" ; shift 2 ;;

		-D|--database-type )
			databaseType="$2" ; shift 2 ;;

		-- ) shift ; break ;;
		* ) printError;;
	esac
done

if [ "$CMD" != "" -a "$hostname" != "" ]
then
	main
else
	printError
fi

exit 0
